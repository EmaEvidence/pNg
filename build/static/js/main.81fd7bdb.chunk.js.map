{"version":3,"sources":["components/JobTable.jsx","components/AllNumbers.jsx","components/SingleJob.jsx","components/App.js","serviceWorker.js","index.js"],"names":["JobTable","props","jobs","react_default","a","createElement","className","length","map","job","index","key","name","minNumber","maxNumber","size","AllNumbers","allNumbers","handleBackToList","onClick","join","SingleJob","numbers","toastr","options","timeOut","extendedTimeOut","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleGenerateNumber","bind","assertThisInitialized","getAllNumbers","loadJobs","_this2","axios","post","then","response","setState","toConsumableArray","concat","data","objectSpread","catch","err","error","_this3","get","backToList","_this4","_this$state","type","components_SingleJob","components_AllNumbers","components_JobTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81fd7bdb.chunk.js","sourcesContent":["import React from 'react';\n\nconst JobTable = (props) => {\n  const { jobs } = props;\n  return (\n    <div className=\"job-table\">\n      <h5>Completed Jobs</h5>\n      <table className=\"job-list\">\n        <thead>\n          <tr>\n            <td className=\"date header\">File Name</td>\n            <td className=\"first-number header\">Min Number</td>\n            <td className=\"last-number header\">Max Number</td>\n            <td className=\"size header\">File Size</td>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            (jobs.length === 0) && <tr>No Job Yet</tr>\n          }\n          {\n            jobs.map((job, index) => {\n              return (\n                <tr key={index}>\n                  <td className=\"date\">{job.name}</td>\n                  <td className=\"first-number\">{job.minNumber}</td>\n                  <td className=\"last-number\">{job.maxNumber}</td>\n                  <td className=\"size\">{job.size}</td>\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default JobTable;\n","import React from 'react';\n\nconst AllNumbers = (props) => {\n  const { allNumbers, handleBackToList, jobs } = props;\n  return (\n    <div className=\"numbers-container\">\n      <div className=\"numbers-wrapper\">\n        <button onClick={handleBackToList} className=\"all-numbers-trigger back-btn\">Back to List</button>\n        <div className=\"total-number\">\n          Total Numbers Generated in {jobs.length} job(s): {allNumbers.length}\n        </div>\n        <div className=\"numbers\">\n          {\n            allNumbers.join()\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AllNumbers;\n","import React from 'react';\n\nconst SingleJob = (props) => {\n  const { handleBackToList, job } = props;\n  return (\n    <div className=\"numbers-container\">\n      <div className=\"numbers-wrapper\">\n        <button onClick={handleBackToList} className=\"all-numbers-trigger back-btn\">Back to List</button>\n        <div className=\"total-number\">\n          <span>Total Numbers Generated in the last job: {job.numbers.length}</span>\n          <div>\n            <span>Min-Number: {job.minNumber}. </span>\n            <span>Max-Number: {job.maxNumber}. </span>\n            <span>Size: {job.size}. </span>\n          </div>\n        </div>\n        <div className=\"numbers\">\n          {\n            job.numbers.join()\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleJob;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport JobTable from './JobTable';\nimport AllNumbers from './AllNumbers';\nimport SingleJob from './SingleJob';\nimport '../css/App.css';\n\ntoastr.options.timeOut = 10000;\ntoastr.options.extendedTimeOut = 10000;\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobs: [],\n      allNumbers: [],\n      job: {\n        numbers: []\n      }\n    }\n    this.handleGenerateNumber = this.handleGenerateNumber.bind(this);\n    this.getAllNumbers = this.getAllNumbers.bind(this);\n    this.handleBackToList = this.handleBackToList.bind(this);\n    this.loadJobs = this.loadJobs.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadJobs();\n  }\n\n  handleGenerateNumber() {\n    axios.post('http://localhost:9000/numbers')\n      .then((response) => {\n        this.setState({\n          allNumbers: [],\n          jobs: [...this.state.jobs, response.data.data],\n          job: {\n            ...response.data.data\n          }\n        });\n      })\n      .catch((err) => {\n        toastr.error('Error generating Numbers');\n      })\n  }\n\n  getAllNumbers() {\n    axios.get('http://localhost:9000/all_numbers')\n      .then((response) => {\n        this.setState({\n          allNumbers: response.data.data.numbers,\n          backToList: false\n        });\n      })\n      .catch((err) => {\n        toastr.error('Error Fetching all Numbers');\n      })\n  }\n\n  handleBackToList() {\n    this.setState({\n      allNumbers: [],\n      job: {\n        numbers: []\n      }\n    });\n  }\n  \n  loadJobs() {\n    axios.get('http://localhost:9000/numbers')\n      .then((response) => {\n        this.setState({\n          jobs: response.data.data\n        });\n      })\n      .catch((err) => {\n        toastr.error('Error Fetching Numbers List');\n      });\n  }\n\n  render() {\n    const { jobs, allNumbers, job } = this.state; \n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"details\">\n            <h3 className=\"name\">pNg</h3>\n            <h4 className=\"description\">\n              Phone Number Generator. <br />\n              We are cut out to generate Phone Numbers for you.\n            </h4>\n            <button type=\"button\" className=\"job-trigger\" onClick={this.handleGenerateNumber}>\n              Create Phone Numbers\n            </button>\n            <button type=\"button\" onClick={this.getAllNumbers} className=\"all-numbers-trigger\">\n              Get all Numbers\n            </button>\n          </div>\n          <div className=\"jobs\">\n            {\n              (job.numbers.length !== 0)\n                ? <SingleJob job={job} handleBackToList={this.handleBackToList} />\n                : (allNumbers && allNumbers.length !== 0)\n                ? <AllNumbers allNumbers={allNumbers} jobs={jobs} handleBackToList={this.handleBackToList} />\n                : <JobTable jobs={jobs} />\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}